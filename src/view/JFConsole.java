/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.AWTException;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import negocio.AppParameters;
import negocio.ConnectionFTP;
import negocio.Monitoreo;
import org.apache.log4j.Logger;

/**
 *
 * @author m-1
 */
public class JFConsole extends javax.swing.JFrame {

    /**
     * Creates new form JFConsole
     */
    private JFrame parent;
    private PopupMenu popup = new PopupMenu();
    private final Image image = new ImageIcon(getClass().getResource("/resource/icon.png")).getImage();
    private final TrayIcon trayIcon = new TrayIcon(image, "Export Backups", popup);

    public JFConsole() {
        initComponents();
        this.setLocationRelativeTo(this);
        this.setIconImage(image);
        this.setSize(800, 500);
        this.setTitle("Export Backups Service");
        initPrintConsole();
        parent = this;

        //comprueba si SystemTray es soportado en el sistema
        if (SystemTray.isSupported()) {
            //obtiene instancia SystemTray
            SystemTray systemtray = SystemTray.getSystemTray();
            trayIcon.setImageAutoSize(true);
            /* ----------------- ACCIONES DEL MENU POPUP --------------------- */
            //Salir de aplicacion
            ActionListener exitListener = new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    System.exit(0);
                }
            };
           
            //Restaurar aplicacion
            ActionListener restoreListener = new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    if (parent.getExtendedState() == JFConsole.ICONIFIED) {
                        parent.setVisible(true);
                        parent.setExtendedState(JFrame.NORMAL);
                        parent.repaint();
                    }
                }
            };
            //Se crean los Items del menu PopUp y se añaden
            MenuItem exitAppItem = new MenuItem("Salir");
            exitAppItem.addActionListener(exitListener);
            popup.add(exitAppItem);

            MenuItem restoreAppItem = new MenuItem("Restaurar");
            restoreAppItem.addActionListener(restoreListener);
            popup.add(restoreAppItem);


            //Añade el TrayIcon al SystemTray
            try {
                systemtray.add(trayIcon);
            } catch (AWTException e) {
                System.out.println("Error:" + e.getMessage());
            }
        } else {
            System.err.println("Error: SystemTray no es soportado");
            return;
        }
         //Cuando se minimiza JFrame, se oculta para que no aparesca en la barra de tareas
        parent.addWindowListener(new WindowAdapter(){
            @Override
            public void windowIconified(WindowEvent e){
               parent.setVisible(false);//Se oculta JFrame
                mensajeTrayIcon("Aplicación minimizada en la barra de estado.", TrayIcon.MessageType.INFO);
            }
        });

    }

    //Muestra una burbuja con la accion que se realiza
    public void mensajeTrayIcon(String texto, TrayIcon.MessageType tipo)
    {
        trayIcon.displayMessage("Export Backups Service", texto, tipo);        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 102));
        jScrollPane1.setForeground(new java.awt.Color(204, 102, 0));

        editorPane.setEditable(false);
        editorPane.setBackground(new java.awt.Color(0, 0, 102));
        editorPane.setForeground(new java.awt.Color(255, 204, 0));
        jScrollPane1.setViewportView(editorPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void initPrintConsole() {
        PrintStream printStream = new PrintStream(new MyOutputStream(editorPane));

        System.setOut(printStream);

        System.setErr(printStream);
    }
}
